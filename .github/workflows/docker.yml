name: Build and Push Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      - name: Show repo layout
        run: |
          set -eux
          pwd
          ls -la
          echo "---- tree -L 2 (if available) ----"
          command -v tree && tree -L 2 || true

      - name: Verify frontend exists
        run: |
          set -eux
          test -d frontend || (echo "Missing ./frontend directory at repo root" && exit 2)
          test -f frontend/package.json || (echo "Missing ./frontend/package.json" && exit 3)
          head -n 50 frontend/package.json || true

      - name: Sanity â€” no placeholder ellipses
        run: |
          set -e
          # Only scan documentation/text files to avoid flagging TS/TSX spread syntax
          if grep -R -n --include='*.md' --include='*.mdx' --include='*.txt' --include='*.yml' --include='*.yaml' --include='*.json' -E '(^\.\.\.$|[^/]\.\.\.[^/])' .; then
            echo "Found placeholder '...' in docs/config files. Remove before building."; exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine push permissions
        id: push
        run: |
          if [ -n "${DOCKERHUB_USERNAME}" ] && [ -n "${DOCKERHUB_TOKEN}" ]; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "ok=false" >> $GITHUB_OUTPUT
            echo "Skipping Docker Hub push: DOCKERHUB_USERNAME/TOKEN not set."
          fi
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: ${{ steps.push.outputs.ok == 'true' }}
        id: docker_login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (CPU) with plain logs
        if: ${{ steps.docker_login.outcome == 'success' }}
        run: |
          set -euxo pipefail
          docker build \
            --progress=plain \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/audio-scene-architect:latest \
            .

      - name: Push (CPU)
        if: ${{ steps.docker_login.outcome == 'success' }}
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/audio-scene-architect:latest

      - name: Smoke run + health (CPU)
        if: ${{ steps.docker_login.outcome == 'success' }}
        run: |
          set -euo pipefail
          docker run -d --name test-container -p 8000:8000 \
            -e USE_HEAVY=0 \
            ${{ secrets.DOCKERHUB_USERNAME }}/audio-scene-architect:latest

          echo "=== Wait for health ==="
          for i in $(seq 1 40); do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null 2>&1 || \
               curl -fsS http://127.0.0.1:8000/api/health >/dev/null 2>&1; then
              echo "Health OK"; break
            fi
            sleep 1
          done

          if ! (curl -fsS http://127.0.0.1:8000/health >/dev/null 2>&1 || \
                curl -fsS http://127.0.0.1:8000/api/health >/dev/null 2>&1); then
            echo "Health failed; dumping /api/debug/routes (if present):"
            curl -fsS http://127.0.0.1:8000/api/debug/routes || true
            echo "Dumping /docs (first 2000 chars):"
            curl -fsS http://127.0.0.1:8000/docs | head -c 2000 || true
            docker logs --timestamps test-container | tail -n 400 || true
            docker rm -f test-container || true
            exit 1
          fi

          curl -fsS http://127.0.0.1:8000/api/debug/routes | jq || true
          docker rm -f test-container || true
