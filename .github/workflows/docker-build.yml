name: Build, Test and Push SoundForge.AI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Sanity — no placeholder markers
        run: |
          set -e
          echo "=== Sanity: scan for placeholder LINES (excluding _legacy/docs/workflows) ==="
          # Fail only if a line is literally '...' (with optional whitespace) or a comment '# ...'
          # Exclude legacy, docs, markdown, and workflows themselves.
          if git grep -n -E '^[[:space:]]*\.{3}[[:space:]]*$|^[[:space:]]*#\s*\.{3}[[:space:]]*$' -- \
              -- . \
              ':(exclude)_legacy/**' \
              ':(exclude)docs/**' \
              ':(exclude).github/workflows/**' \
              ':(exclude)**/*.md'
          then
            echo '❌ Found placeholder lines like "..." or "# ...". Remove them or move to _legacy/.'
            exit 1
          else
            echo '✅ No placeholder lines found.'
          fi

      - name: Compute tags
        id: tag
        run: |
          TS=$(date -u +%Y%m%d-%H%M%S)
          SHA7=${GITHUB_SHA::7}
          echo "ts=$TS" >> $GITHUB_OUTPUT
          echo "sha7=$SHA7" >> $GITHUB_OUTPUT
          echo "cpu_tag=jakeypoov/audio-scene-architect:cpu-${TS}-${SHA7}" >> $GITHUB_OUTPUT

      - name: Build Docker Image with Validation
        run: |
          echo "=== Building SoundForge.AI Docker image ==="
          docker build \
            --build-arg BUILD_TAG=${{ steps.tag.outputs.ts }} \
            --build-arg IMAGE_TAG=${{ steps.tag.outputs.cpu_tag }} \
            --build-arg GIT_SHA=${{ github.sha }} \
            -t ${{ steps.tag.outputs.cpu_tag }} \
            -t jakeypoov/audio-scene-architect:latest \
            . --progress=plain
          echo "=== Image built successfully! ==="
          docker images | grep audio-scene-architect || true

      - name: Test Container Startup
        run: |
          echo "=== Testing container startup ==="
          docker run -d --name test-container -p 8000:8000 ${{ steps.tag.outputs.cpu_tag }}
          sleep 30
          echo "=== Container status ===" && docker ps -a | grep test-container
          echo "=== Testing health endpoints ==="
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/api/health || exit 1
          echo "✅ health endpoints working!"
          echo "=== Version diagnostics ==="
          curl -sf http://localhost:8000/api/version | jq '{build, platform, cuda, heavy, frontend}'
          echo "=== Testing generate-audio endpoint ==="
          RES=$(curl -s -X POST http://localhost:8000/api/generate-audio \
            -H "Content-Type: application/json" \
            -d '{"prompt":"leaves crunching under footsteps","duration":8}')
          echo "$RES" | jq .
          OK=$(echo "$RES" | jq -r .ok)
          URL=$(echo "$RES" | jq -r .file_url)
          if [ "$OK" != "true" ] || [ -z "$URL" ] || [ "$URL" = "null" ]; then
            echo "❌ generate-audio failed or missing file_url"; exit 1; fi
          echo "=== HEAD the returned file ==="
          curl -If http://localhost:8000$URL | head -n 1 | grep -q "200" || exit 1
          echo "✅ /api/generate-audio produced a reachable file"
          echo "=== Container logs (recent) ==="
          docker logs test-container --since=10s | sed -n '1,160p'
          docker stop test-container && docker rm test-container

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ steps.tag.outputs.cpu_tag }}
          docker push jakeypoov/audio-scene-architect:latest
          echo "✅ Image pushed to Docker Hub successfully!"
          echo "Stamped tag: ${{ steps.tag.outputs.cpu_tag }}"