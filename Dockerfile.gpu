# ---------- Frontend builder (Node only here) ----------
FROM node:20-alpine AS fe
WORKDIR /app/frontend

# Copy only package manifests first for better caching
COPY frontend/package.json frontend/package.json
# If you have a lockfile, copy it too; if not, this line is harmless
COPY frontend/package-lock.json frontend/package-lock.json 2>/dev/null || true

# Install deps: prefer ci when lockfile exists, else install
RUN if [ -f package-lock.json ]; then \
      echo ">>> npm ci (lockfile present)"; npm ci; \
    else \
      echo ">>> npm install (no lockfile)"; npm install --no-audit --no-fund; \
    fi

# Copy the rest and build
COPY frontend/ /app/frontend/
RUN npm run build && \
    echo "node: $(node -v)" > /app/frontend_build_info.txt && \
    echo "npm:  $(npm -v)"  >> /app/frontend_build_info.txt

# ---------- Runtime (Python + CUDA-compatible wheels) ----------
FROM python:3.10-slim AS run
ENV PYTHONUNBUFFERED=1 PIP_NO_CACHE_DIR=1

# System deps (ffmpeg, libsndfile for soundfile, etc.)
RUN apt-get update && apt-get install -y --no-install-recommends \
      ffmpeg libsndfile1 git curl ca-certificates build-essential && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Backend deps
COPY backend/requirements.txt backend/requirements.txt
COPY backend/requirements-heavy.txt backend/requirements-heavy.txt
RUN pip install --upgrade pip && \
    pip install -r backend/requirements.txt && \
    pip install -r backend/requirements-heavy.txt

# App code
COPY backend/ backend/

# Bring in built frontend artifacts & build-info
COPY --from=fe /app/frontend/dist /app/frontend/dist
COPY --from=fe /app/frontend_build_info.txt /app/frontend_build_info.txt

# Expose + healthcheck
EXPOSE 8000
HEALTHCHECK --interval=30s --timeout=5s --retries=3 CMD \
  curl -fsS http://127.0.0.1:8000/health || \
  curl -fsS http://127.0.0.1:8000/api/health || exit 1

# Run app
CMD ["python","-m","uvicorn","backend.main:app","--host","0.0.0.0","--port","8000","--log-level","info"]
