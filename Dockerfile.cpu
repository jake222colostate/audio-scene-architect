# syntax=docker/dockerfile:1.7

# ---- Frontend build (root SPA) ----
FROM node:20-slim AS frontend
WORKDIR /app
COPY package.json package-lock.json* ./
RUN if [ -f package-lock.json ]; then npm ci; else npm i; fi
COPY . .
RUN npm run build

# ---- Runtime (CPU, no heavy deps) ----
FROM python:3.11-slim AS runtime
ENV PYTHONUNBUFFERED=1 PYTHONDONTWRITEBYTECODE=1
WORKDIR /app

# System deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg libsndfile1 git curl build-essential \
 && rm -rf /var/lib/apt/lists/*

# Copy only manifests first for cache
COPY backend/requirements.txt backend/requirements.in backend/constraints.txt /tmp/requirements/

# Install python deps with cache mount
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip && \
    pip install -r /tmp/requirements/requirements.txt && \
    pip install -r /tmp/requirements/requirements.in -c /tmp/requirements/constraints.txt

# Copy backend code and frontend build
COPY backend /app/backend
COPY --from=frontend /app/dist /app/frontend/dist

# Env and ports
ENV USE_HEAVY=0 ALLOW_FALLBACK=1
EXPOSE 8000

# Healthcheck
HEALTHCHECK --start-period=30s --interval=5s --timeout=3s --retries=60 \
  CMD curl -fsS http://localhost:8000/api/ready || exit 1

# Entrypoint
CMD ["python3", "-m", "backend.start"]
